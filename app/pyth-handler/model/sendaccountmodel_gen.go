// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sendAccountFieldNames          = builder.RawFieldNames(&SendAccount{})
	sendAccountRows                = strings.Join(sendAccountFieldNames, ",")
	sendAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(sendAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sendAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(sendAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSendAccountIdPrefix = "cache:sendAccount:id:"
)

type (
	sendAccountModel interface {
		Insert(ctx context.Context, data *SendAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SendAccount, error)
		Update(ctx context.Context, data *SendAccount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSendAccountModel struct {
		sqlc.CachedConn
		table string
	}

	SendAccount struct {
		Id         int64  `db:"id"`
		SendChanel string `db:"send_chanel"` // 发送渠道
		Config     string `db:"config"`      // 账户配置
		Title      string `db:"title"`       // 账号名称
	}
)

func newSendAccountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSendAccountModel {
	return &defaultSendAccountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`send_account`",
	}
}

func (m *defaultSendAccountModel) Delete(ctx context.Context, id int64) error {
	sendAccountIdKey := fmt.Sprintf("%s%v", cacheSendAccountIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, sendAccountIdKey)
	return err
}

func (m *defaultSendAccountModel) FindOne(ctx context.Context, id int64) (*SendAccount, error) {
	sendAccountIdKey := fmt.Sprintf("%s%v", cacheSendAccountIdPrefix, id)
	var resp SendAccount
	err := m.QueryRowCtx(ctx, &resp, sendAccountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sendAccountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSendAccountModel) Insert(ctx context.Context, data *SendAccount) (sql.Result, error) {
	sendAccountIdKey := fmt.Sprintf("%s%v", cacheSendAccountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sendAccountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SendChanel, data.Config, data.Title)
	}, sendAccountIdKey)
	return ret, err
}

func (m *defaultSendAccountModel) Update(ctx context.Context, data *SendAccount) error {
	sendAccountIdKey := fmt.Sprintf("%s%v", cacheSendAccountIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sendAccountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SendChanel, data.Config, data.Title, data.Id)
	}, sendAccountIdKey)
	return err
}

func (m *defaultSendAccountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSendAccountIdPrefix, primary)
}

func (m *defaultSendAccountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sendAccountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSendAccountModel) tableName() string {
	return m.table
}
