// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package app

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsRecordFieldNames          = builder.RawFieldNames(&SmsRecord{})
	smsRecordRows                = strings.Join(smsRecordFieldNames, ",")
	smsRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(smsRecordFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	smsRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(smsRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	smsRecordModel interface {
		Insert(ctx context.Context, data *SmsRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SmsRecord, error)
		Update(ctx context.Context, data *SmsRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SmsRecord struct {
		Id                int64  `db:"id"`
		MessageTemplateId int64  `db:"message_template_id"` // 消息模板ID
		Phone             int64  `db:"phone"`               // 手机号
		SupplierId        int64  `db:"supplier_id"`         // 发送短信渠道商的ID
		SupplierName      string `db:"supplier_name"`       // 发送短信渠道商的名称
		MsgContent        string `db:"msg_content"`         // 短信发送的内容
		SeriesId          string `db:"series_id"`           // 下发批次的ID
		ChargingNum       int64  `db:"charging_num"`        // 计费条数
		ReportContent     string `db:"report_content"`      // 回执内容
		Status            int64  `db:"status"`              // 短信状态： 10.发送 20.成功 30.失败
		SendDate          int64  `db:"send_date"`           // 发送日期：20211112
		Created           int64  `db:"created"`             // 创建时间
		Updated           int64  `db:"updated"`             // 更新时间
	}
)

func newSmsRecordModel(conn sqlx.SqlConn) *defaultSmsRecordModel {
	return &defaultSmsRecordModel{
		conn:  conn,
		table: "`sms_record`",
	}
}

func (m *defaultSmsRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSmsRecordModel) FindOne(ctx context.Context, id int64) (*SmsRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsRecordRows, m.table)
	var resp SmsRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsRecordModel) Insert(ctx context.Context, data *SmsRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, smsRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.MessageTemplateId, data.Phone, data.SupplierId, data.SupplierName, data.MsgContent, data.SeriesId, data.ChargingNum, data.ReportContent, data.Status, data.SendDate, data.Created, data.Updated)
	return ret, err
}

func (m *defaultSmsRecordModel) Update(ctx context.Context, data *SmsRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MessageTemplateId, data.Phone, data.SupplierId, data.SupplierName, data.MsgContent, data.SeriesId, data.ChargingNum, data.ReportContent, data.Status, data.SendDate, data.Created, data.Updated, data.Id)
	return err
}

func (m *defaultSmsRecordModel) tableName() string {
	return m.table
}
